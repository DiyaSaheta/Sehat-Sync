--------------------------------------------------------------------------
AI SYMPTOM CHECKER CODE
---------------------------------------------------------------------------
import 'package:flutter/material.dart';
import 'package:speech_to_text/speech_to_text.dart' as stt;

void main() {
  runApp(TelemedicineApp());
}

class TelemedicineApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Rural Telemedicine',
      theme: ThemeData(primarySwatch: Colors.teal),
      home: SymptomInputPage(),
      routes: {
        '/appointments': (_) => AppointmentPage(),
        '/pharmacy': (_) => PharmacyInventoryPage(),
      },
    );
  }
}

class SymptomInputPage extends StatefulWidget {
  @override
  _SymptomInputPageState createState() => _SymptomInputPageState();
}

class _SymptomInputPageState extends State<SymptomInputPage> {
  final TextEditingController _symptomController = TextEditingController();
  late stt.SpeechToText _speech;
  bool _isListening = false;
  String _voiceInput = '';
  List<String> _results = [];

  final Map<String, List<String>> symptomConditions = {
    'fever': ['Common Cold', 'Flu', 'Malaria'],
    'cough': ['Common Cold', 'Flu', 'Tuberculosis'],
    'headache': ['Migraine', 'Flu'],
    'fatigue': ['Anemia', 'Flu', 'Malaria'],
    'chest pain': ['Heart Attack', 'Angina'],
    'shortness of breath': ['Asthma', 'Heart Attack'],
    'rash': ['Allergy', 'Chickenpox'],
  };

  @override
  void initState() {
    super.initState();
    _speech = stt.SpeechToText();
  }

  void _listen() async {
    if (!_isListening) {
      bool available = await _speech.initialize(
        onStatus: (val) => setState(() {
          if (val == 'done') _isListening = false;
        }),
        onError: (val) => setState(() {
          _isListening = false;
        }),
      );
      if (available) {
        setState(() => _isListening = true);
        _speech.listen(onResult: (val) {
          setState(() {
            _voiceInput = val.recognizedWords;
            _symptomController.text = _voiceInput;
          });
        });
      }
    } else {
      setState(() {
        _isListening = false;
        _speech.stop();
      });
    }
  }

  void _checkSymptoms() {
    final inputSymptoms = _symptomController.text.toLowerCase().split(RegExp(r'[ ,]+'));
    Map<String, int> conditionScores = {};
    for (var symptom in inputSymptoms) {
      if (symptomConditions.containsKey(symptom)) {
        for (var condition in symptomConditions[symptom]!) {
          conditionScores[condition] = (conditionScores[condition] ?? 0) + 1;
        }
      }
    }
    var rankedConditions = conditionScores.entries.toList()
      ..sort((a, b) => b.value.compareTo(a.value));
    setState(() {
      _results = rankedConditions.take(3).map((e) => '${e.key} (${e.value})').toList();
    });
  }

  Widget _buildListeningIndicator() {
    return _isListening
        ? Padding(
            padding: const EdgeInsets.only(left: 8.0),
            child: Icon(Icons.mic, color: Colors.redAccent, size: 24),
          )
        : SizedBox.shrink();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Symptom Checker', style: TextStyle(fontWeight: FontWeight.bold)),
        backgroundColor: Colors.teal.shade700,
        actions: [
          IconButton(
            tooltip: 'Appointments',
            icon: Icon(Icons.calendar_today),
            onPressed: () => Navigator.pushNamed(context, '/appointments'),
          ),
          IconButton(
            tooltip: 'Pharmacy Inventory',
            icon: Icon(Icons.local_pharmacy),
            onPressed: () => Navigator.pushNamed(context, '/pharmacy'),
          ),
        ],
      ),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [Colors.teal.shade50, Colors.white],
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
          ),
        ),
        child: Padding(
          padding: const EdgeInsets.all(20.0),
          child: Column(
            children: [
              Card(
                elevation: 5,
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                  child: TextField(
                    controller: _symptomController,
                    decoration: InputDecoration(
                      labelText: 'Enter your symptoms (comma or space separated)',
                      suffixIcon: Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          IconButton(
                            icon: Icon(_isListening ? Icons.mic_off : Icons.mic, color: Colors.teal),
                            onPressed: _listen,
                          ),
                          _buildListeningIndicator(),
                        ],
                      ),
                      border: InputBorder.none,
                    ),
                    minLines: 1,
                    maxLines: 3,
                  ),
                ),
              ),
              SizedBox(height: 30),
              ElevatedButton.icon(
                icon: Icon(Icons.search),
                label: Text('Check Symptoms'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.teal.shade700,
                  padding: EdgeInsets.symmetric(horizontal: 30, vertical: 12),
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
                  textStyle: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
                onPressed: _checkSymptoms,
              ),
              SizedBox(height: 30),
              if (_results.isNotEmpty)
                Card(
                  elevation: 4,
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text('Possible Conditions:', style: TextStyle(fontWeight: FontWeight.bold, fontSize: 18)),
                        SizedBox(height: 10),
                        ..._results.map(
                          (r) => ListTile(
                            leading: Icon(Icons.medical_services, color: Colors.teal),
                            title: Text(r),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
            ],
          ),
        ),
      ),
    );
  }
}

class AppointmentPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Appointments')),
      body: Center(child: Text('Appointment Booking Feature Coming Soon')),
    );
  }
}

class PharmacyInventoryPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Pharmacy Inventory')),
      body: Center(child: Text('Medicine Availability Feature Coming Soon')),
    );
  }
}
====================================================================================================

LOGIN PAGE

-------------------------------------------------------------------------------------
import 'package:flutter/material.dart';

void main() {
  runApp(TelemedicineApp());
}

class TelemedicineApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Rural Telemedicine',
      theme: ThemeData(primarySwatch: Colors.teal),
      home: LanguageSelectionPage(),
    );
  }
}

class LanguageSelectionPage extends StatefulWidget {
  @override
  _LanguageSelectionPageState createState() => _LanguageSelectionPageState();
}

class _LanguageSelectionPageState extends State<LanguageSelectionPage> {
  String? _selectedLanguage;

  final List<String> languages = ['English', 'Hindi', 'Punjabi'];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Select Language')),
      body: Padding(
        padding: EdgeInsets.all(20),
        child: Card(
          elevation: 4,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Text('Choose your preferred language', style: TextStyle(fontSize: 18)),
                SizedBox(height: 20),
                DropdownButtonFormField<String>(
                  decoration: InputDecoration(border: OutlineInputBorder()),
                  value: _selectedLanguage,
                  items: languages
                      .map((lang) => DropdownMenuItem(value: lang, child: Text(lang)))
                      .toList(),
                  onChanged: (val) => setState(() => _selectedLanguage = val),
                ),
                SizedBox(height: 20),
                ElevatedButton(
                  onPressed: _selectedLanguage == null
                      ? null
                      : () => Navigator.push(
                            context,
                            MaterialPageRoute(builder: (_) => UserInfoPage(language: _selectedLanguage!)),
                          ),
                  child: Text('Continue'),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

class UserInfoPage extends StatefulWidget {
  final String language;
  UserInfoPage({required this.language});

  @override
  _UserInfoPageState createState() => _UserInfoPageState();
}

class _UserInfoPageState extends State<UserInfoPage> {
  final TextEditingController _idController = TextEditingController();
  final TextEditingController _otpController = TextEditingController();

  bool _otpSent = false;
  bool _otpVerified = false;

  void _sendOtp() {
    if (_idController.text.isNotEmpty) {
      // Simulate sending OTP
      setState(() {
        _otpSent = true;
      });
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('OTP sent!')));
    }
  }

  void _verifyOtp() {
    if (_otpController.text == '1234') { // For prototype accept 1234 as OTP
      setState(() {
        _otpVerified = true;
      });
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('OTP verified!')));
    } else {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Invalid OTP')));
    }
  }

  @override
  Widget build(BuildContext context) {
    if (!_otpVerified) {
      return Scaffold(
        appBar: AppBar(title: Text('Verify OTP')),
        body: Padding(
          padding: EdgeInsets.all(20),
          child: Card(
            elevation: 4,
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
            child: Padding(
              padding: EdgeInsets.all(16),
              child: Column(mainAxisSize: MainAxisSize.min, children: [
                TextField(
                  controller: _idController,
                  decoration: InputDecoration(
                    labelText: 'Enter Health Card No or Phone No',
                    border: OutlineInputBorder(),
                  ),
                  keyboardType: TextInputType.number,
                ),
                SizedBox(height: 12),
                ElevatedButton(onPressed: _sendOtp, child: Text('Send OTP')),
                if (_otpSent) ...[
                  SizedBox(height: 12),
                  TextField(
                    controller: _otpController,
                    decoration: InputDecoration(
                      labelText: 'Enter OTP',
                      border: OutlineInputBorder(),
                    ),
                    keyboardType: TextInputType.number,
                  ),
                  SizedBox(height: 12),
                  ElevatedButton(onPressed: _verifyOtp, child: Text('Verify OTP')),
                ],
              ]),
            ),
          ),
        ),
      );
    } else {
      return UserTypeSelectionPage(id: _idController.text);
    }
  }
}

class UserTypeSelectionPage extends StatefulWidget {
  final String id;
  UserTypeSelectionPage({required this.id});

  @override
  _UserTypeSelectionPageState createState() => _UserTypeSelectionPageState();
}

class _UserTypeSelectionPageState extends State<UserTypeSelectionPage> {
  String? _userType;
  final List<String> userTypes = ['Doctor', 'Pharmacist', 'Villager'];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Select User Type')),
      body: Padding(
        padding: EdgeInsets.all(20),
        child: Card(
          elevation: 4,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          child: Padding(
            padding: EdgeInsets.all(16),
            child: Column(mainAxisSize: MainAxisSize.min, children: [
              Text('Choose your user type:', style: TextStyle(fontSize: 18)),
              SizedBox(height: 20),
              DropdownButtonFormField<String>(
                decoration: InputDecoration(border: OutlineInputBorder()),
                value: _userType,
                items: userTypes
                    .map((type) => DropdownMenuItem(value: type, child: Text(type)))
                    .toList(),
                onChanged: (val) => setState(() => _userType = val),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _userType == null
                    ? null
                    : () => Navigator.push(
                          context,
                          MaterialPageRoute(
                              builder: (_) => SignupPage(
                                    id: widget.id,
                                    userType: _userType!,
                                  )),
                        ),
                child: Text('Continue'),
              ),
            ]),
          ),
        ),
      ),
    );
  }
}

class SignupPage extends StatefulWidget {
  final String id;
  final String userType;
  SignupPage({required this.id, required this.userType});

  @override
  _SignupPageState createState() => _SignupPageState();
}

class _SignupPageState extends State<SignupPage> {
  late String _username;
  final TextEditingController _passwordController = TextEditingController();

  void _generateUsername() {
    // Simple username generation logic
    username = '${widget.userType.substring(0, 3).toLowerCase()}${widget.id.substring(widget.id.length - 4)}';
  }

  @override
  void initState() {
    super.initState();
    _generateUsername();
  }

  void _signup() {
    if (_passwordController.text.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Password cannot be empty')));
      return;
    }

    // Normally here you will call backend to save the new user.
    ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Account created for $_username')));
    // After signup redirect or login flow can be implemented.
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Create Account')),
      body: Padding(
        padding: EdgeInsets.all(20),
        child: Card(
          elevation: 4,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          child: Padding(
            padding: EdgeInsets.all(16),
            child: Column(mainAxisSize: MainAxisSize.min, children: [
              Text('Generated Username:', style: TextStyle(fontWeight: FontWeight.bold)),
              SizedBox(height: 8),
              Text(_username, style: TextStyle(fontSize: 18, color: Colors.teal.shade700)),
              SizedBox(height: 20),
              TextField(
                controller: _passwordController,
                decoration: InputDecoration(
                  labelText: 'Set your password',
                  border: OutlineInputBorder(),
                ),
                obscureText: true,
              ),
              SizedBox(height: 20),
              ElevatedButton(onPressed: _signup, child: Text('Sign Up')),
            ]),
          ),
        ),
      ),
    );
  }
}
===================================================================================================

